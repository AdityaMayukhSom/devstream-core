openapi: "3.0.0"
info:
  title: Devstream Omnistream Specification
  version: 0.3.0
servers:
  - url: https://devstream.in/api/v1
paths:
  /hello-world:
    get:
      description: Health check for the API.
      responses:
        200:
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckResponse"

  /auth/login:
    post:
      summary: Log in to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/register:
    post:
      summary: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        201:
          description: Registration successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/refresh-token:
    post:
      summary: Refresh the authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        200:
          description: Token refreshed successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/forgot-password:
    post:
      summary: Request a password reset link.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        200:
          description: Password reset request processed successfully.

  /auth/reset-password:
    post:
      summary: Reset the user's password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        200:
          description: Password reset successfully.

  /content:
    get:
      summary: List all user content with optional filters.
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          description: Filter content (e.g., by date or platform).
      responses:
        200:
          description: List of content retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentListResponse"

  /content/{contentId}:
    get:
      summary: Retrieve details for a specific piece of content.
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Content details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentDetails"
    delete:
      summary: Delete a specific piece of content.
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Content deleted successfully.
        404:
          description: Content not found.

  /content/{contentId}/status:
    get:
      summary: Check the status of a specific piece of content.
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Content status retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentStatus"

  /user/profile:
    get:
      summary: Retrieve the current user's profile information.
      responses:
        200:
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
    patch:
      summary: Update user profile details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfile"
      responses:
        200:
          description: User profile updated successfully.

  /user/{userID}:
    delete:
      summary: Deletes user profile.
      parameters:
        - name: userID
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted successfully.
        404:
          description: User with given ID not found.

  /user/settings:
    get:
      summary: Retrieve user-specific settings.
      responses:
        200:
          description: Settings retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
    patch:
      summary: Update user-specific settings.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserSettings"
      responses:
        200:
          description: Settings updated successfully.

  /platforms/connect:
    post:
      summary: Connect a new platform.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlatformConnectRequest"
      responses:
        200:
          description: Platform connected successfully.

  /platforms/sync:
    post:
      summary: Sync content from external platforms.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlatformSyncRequest"
      responses:
        200:
          description: Platform sync initiated successfully.

components:
  schemas:
    HealthCheckResponse:
      type: object
      properties:
        serverTime:
          type: string
          format: datetime

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
        newPassword:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    ContentListResponse:
      type: object
      properties:
        contents:
          type: array
          items:
            $ref: "#/components/schemas/ContentDetails"

    ContentDetails:
      type: object
      properties:
        contentId:
          type: string
        title:
          type: string
        description:
          type: string
        platforms:
          type: array
          items:
            type: string

    ContentStatus:
      type: object
      properties:
        status:
          type: string
          enum: ["pending", "published", "error"]

    UserProfile:
      type: object
      properties:
        userId:
          type: string
        username:
          type: string
        email:
          type: string
        avatarUrl:
          type: string

    UpdateUserProfile:
      type: object
      properties:
        username:
          type: string
        avatarUrl:
          type: string

    UserSettings:
      type: object
      properties:
        notifications:
          type: boolean
        privacy:
          type: string
          enum: ["public", "private"]

    UpdateUserSettings:
      type: object
      properties:
        notifications:
          type: boolean
        privacy:
          type: string
          enum: ["public", "private"]

    PlatformConnectRequest:
      type: object
      properties:
        platformName:
          type: string
        credentials:
          type: object

    PlatformSyncRequest:
      type: object
      properties:
        platformId:
          type: string

    CollaborationInviteRequest:
      type: object
      properties:
        contentId:
          type: string
        userIds:
          type: array
          items:
            type: string

    InvitationsResponse:
      type: object
      properties:
        invitations:
          type: array
          items:
            type: object
            properties:
              invitationId:
                type: string
              contentId:
                type: string
              senderId:
                type: string

    InvitationResponse:
      type: object
      properties:
        invitationId:
          type: string
        action:
          type: string
          enum: ["accept", "decline"]

    ContentAnalytics:
      type: object
      properties:
        views:
          type: integer
        engagement:
          type: integer

    UserAnalytics:
      type: object
      properties:
        totalContent:
          type: integer
        totalViews:
          type: integer
