plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version "7.10.0"
}

group = 'in'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
  	annotationProcessor 'org.projectlombok:lombok'

	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-validation'

  	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'com.mysql:mysql-connector-j'

  	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.2.0"

	implementation 'org.mapstruct:mapstruct:1.6.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'

	implementation "com.google.guava:guava:33.3.0-jre"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
}

tasks.named('test') {
	useJUnitPlatform()
}


openApiGenerate {
    generatorName = "spring"
    inputSpec = "${projectDir}/openapi/devstream.yml"
    outputDir = "${projectDir}/api/server"
    apiPackage = "in.devstream.api"
    modelPackage = "in.devstream.model"
	modelNameSuffix = "Dto"

	configOptions = [
		// configPackage: "${openapiConfigPackage}",
		// dateLibrary: "java8",
		openApiNullable: "false",
		disallowAdditionalPropertiesIfNotPresent: "false",
		// groupId: "${group}",
		hateoas: "false",
		interfaceOnly: "true",
		licenseName: "Unlicense",
		singleContentTypes: "true", // Whether to select only one produces/consumes content-type by operation.
		title: "${rootProject.name}",
		unhandledException: "true", // Declare operation methods to throw a generic exception and allow unhandled exceptions
		useTags: "true", // use tags for creating interface and controller classnames
		useOptional: "true"
	]
	// delegatePattern = true
}

// https://blog.samzhu.dev/2021/05/26/How-to-automatically-generate-interface-and-Data-Transfer-Object-from-OpenAPI-yaml-file
task buildTypeScriptSdk(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "typescript-axios"
    inputSpec = "${projectDir}/openapi/devstream.yml"
	outputDir = "${rootDir}/api/client/react"
}